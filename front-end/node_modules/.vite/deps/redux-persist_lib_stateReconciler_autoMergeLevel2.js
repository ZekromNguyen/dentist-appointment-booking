import {
  __commonJS
} from "./chunk-WXXH56N5.js";

// node_modules/redux-persist/lib/stateReconciler/autoMergeLevel2.js
var require_autoMergeLevel2 = __commonJS({
  "node_modules/redux-persist/lib/stateReconciler/autoMergeLevel2.js"(exports) {
    exports.__esModule = true;
    exports.default = autoMergeLevel2;
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function autoMergeLevel2(inboundState, originalState, reducedState, _ref) {
      var debug = _ref.debug;
      var newState = _objectSpread({}, reducedState);
      if (inboundState && _typeof(inboundState) === "object") {
        Object.keys(inboundState).forEach(function(key) {
          if (key === "_persist")
            return;
          if (originalState[key] !== reducedState[key]) {
            if (debug)
              console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key);
            return;
          }
          if (isPlainEnoughObject(reducedState[key])) {
            newState[key] = _objectSpread({}, newState[key], {}, inboundState[key]);
            return;
          }
          newState[key] = inboundState[key];
        });
      }
      if (debug && inboundState && _typeof(inboundState) === "object")
        console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(", "), "'"));
      return newState;
    }
    function isPlainEnoughObject(o) {
      return o !== null && !Array.isArray(o) && _typeof(o) === "object";
    }
  }
});
export default require_autoMergeLevel2();
//# sourceMappingURL=redux-persist_lib_stateReconciler_autoMergeLevel2.js.map
