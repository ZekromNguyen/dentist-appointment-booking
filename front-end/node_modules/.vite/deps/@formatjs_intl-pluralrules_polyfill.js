import {
  init_lib,
  init_lib2,
  init_tslib_es6,
  lib_exports,
  lib_exports2,
  tslib_es6_exports
} from "./chunk-X24XCHDD.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-GFT2G5UO.js";

// node_modules/@formatjs/intl-pluralrules/abstract/InitializePluralRules.js
var require_InitializePluralRules = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/abstract/InitializePluralRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InitializePluralRules = void 0;
    var ecma402_abstract_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var intl_localematcher_1 = (init_lib(), __toCommonJS(lib_exports));
    function InitializePluralRules(pl, locales, options, _a) {
      var availableLocales = _a.availableLocales, relevantExtensionKeys = _a.relevantExtensionKeys, localeData = _a.localeData, getDefaultLocale = _a.getDefaultLocale, getInternalSlots = _a.getInternalSlots;
      var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
      var opt = /* @__PURE__ */ Object.create(null);
      var opts = (0, ecma402_abstract_1.CoerceOptionsToObject)(options);
      var internalSlots = getInternalSlots(pl);
      internalSlots.initializedPluralRules = true;
      var matcher = (0, ecma402_abstract_1.GetOption)(opts, "localeMatcher", "string", ["best fit", "lookup"], "best fit");
      opt.localeMatcher = matcher;
      internalSlots.type = (0, ecma402_abstract_1.GetOption)(opts, "type", "string", ["cardinal", "ordinal"], "cardinal");
      (0, ecma402_abstract_1.SetNumberFormatDigitOptions)(internalSlots, opts, 0, 3, "standard");
      var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);
      internalSlots.locale = r.locale;
      return pl;
    }
    exports.InitializePluralRules = InitializePluralRules;
  }
});

// node_modules/@formatjs/intl-pluralrules/abstract/GetOperands.js
var require_GetOperands = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/abstract/GetOperands.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOperands = void 0;
    var ecma402_abstract_1 = (init_lib2(), __toCommonJS(lib_exports2));
    function GetOperands(s) {
      (0, ecma402_abstract_1.invariant)(typeof s === "string", "GetOperands should have been called with a string");
      var n = (0, ecma402_abstract_1.ToNumber)(s);
      (0, ecma402_abstract_1.invariant)(isFinite(n), "n should be finite");
      var dp = s.indexOf(".");
      var iv;
      var f;
      var v;
      var fv = "";
      if (dp === -1) {
        iv = n;
        f = 0;
        v = 0;
      } else {
        iv = s.slice(0, dp);
        fv = s.slice(dp, s.length);
        f = (0, ecma402_abstract_1.ToNumber)(fv);
        v = fv.length;
      }
      var i = Math.abs((0, ecma402_abstract_1.ToNumber)(iv));
      var w;
      var t;
      if (f !== 0) {
        var ft = fv.replace(/0+$/, "");
        w = ft.length;
        t = (0, ecma402_abstract_1.ToNumber)(ft);
      } else {
        w = 0;
        t = 0;
      }
      return {
        Number: n,
        IntegerDigits: i,
        NumberOfFractionDigits: v,
        NumberOfFractionDigitsWithoutTrailing: w,
        FractionDigits: f,
        FractionDigitsWithoutTrailing: t
      };
    }
    exports.GetOperands = GetOperands;
  }
});

// node_modules/@formatjs/intl-pluralrules/abstract/ResolvePlural.js
var require_ResolvePlural = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/abstract/ResolvePlural.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResolvePlural = void 0;
    var ecma402_abstract_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var GetOperands_1 = require_GetOperands();
    function ResolvePlural(pl, n, _a) {
      var getInternalSlots = _a.getInternalSlots, PluralRuleSelect = _a.PluralRuleSelect;
      var internalSlots = getInternalSlots(pl);
      (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(internalSlots) === "Object", "pl has to be an object");
      (0, ecma402_abstract_1.invariant)("initializedPluralRules" in internalSlots, "pluralrules must be initialized");
      (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(n) === "Number", "n must be a number");
      if (!isFinite(n)) {
        return "other";
      }
      var locale = internalSlots.locale, type = internalSlots.type;
      var res = (0, ecma402_abstract_1.FormatNumericToString)(internalSlots, n);
      var s = res.formattedString;
      var operands = (0, GetOperands_1.GetOperands)(s);
      return PluralRuleSelect(locale, type, n, operands);
    }
    exports.ResolvePlural = ResolvePlural;
  }
});

// node_modules/@formatjs/intl-pluralrules/get_internal_slots.js
var require_get_internal_slots = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/get_internal_slots.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var internalSlotMap = /* @__PURE__ */ new WeakMap();
    function getInternalSlots(x) {
      var internalSlots = internalSlotMap.get(x);
      if (!internalSlots) {
        internalSlots = /* @__PURE__ */ Object.create(null);
        internalSlotMap.set(x, internalSlots);
      }
      return internalSlots;
    }
    exports.default = getInternalSlots;
  }
});

// node_modules/@formatjs/intl-pluralrules/index.js
var require_intl_pluralrules = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PluralRules = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ecma402_abstract_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var InitializePluralRules_1 = require_InitializePluralRules();
    var ResolvePlural_1 = require_ResolvePlural();
    var get_internal_slots_1 = tslib_1.__importDefault(require_get_internal_slots());
    function validateInstance(instance, method) {
      if (!(instance instanceof PluralRules)) {
        throw new TypeError("Method Intl.PluralRules.prototype.".concat(method, " called on incompatible receiver ").concat(String(instance)));
      }
    }
    function PluralRuleSelect(locale, type, _n, _a) {
      var IntegerDigits = _a.IntegerDigits, NumberOfFractionDigits = _a.NumberOfFractionDigits, FractionDigits = _a.FractionDigits;
      return PluralRules.localeData[locale].fn(NumberOfFractionDigits ? "".concat(IntegerDigits, ".").concat(FractionDigits) : IntegerDigits, type === "ordinal");
    }
    var PluralRules = (
      /** @class */
      function() {
        function PluralRules2(locales, options) {
          var newTarget = this && this instanceof PluralRules2 ? this.constructor : void 0;
          if (!newTarget) {
            throw new TypeError("Intl.PluralRules must be called with 'new'");
          }
          return (0, InitializePluralRules_1.InitializePluralRules)(this, locales, options, {
            availableLocales: PluralRules2.availableLocales,
            relevantExtensionKeys: PluralRules2.relevantExtensionKeys,
            localeData: PluralRules2.localeData,
            getDefaultLocale: PluralRules2.getDefaultLocale,
            getInternalSlots: get_internal_slots_1.default
          });
        }
        PluralRules2.prototype.resolvedOptions = function() {
          validateInstance(this, "resolvedOptions");
          var opts = /* @__PURE__ */ Object.create(null);
          var internalSlots = (0, get_internal_slots_1.default)(this);
          opts.locale = internalSlots.locale;
          opts.type = internalSlots.type;
          [
            "minimumIntegerDigits",
            "minimumFractionDigits",
            "maximumFractionDigits",
            "minimumSignificantDigits",
            "maximumSignificantDigits"
          ].forEach(function(field) {
            var val = internalSlots[field];
            if (val !== void 0) {
              opts[field] = val;
            }
          });
          opts.pluralCategories = tslib_1.__spreadArray([], PluralRules2.localeData[opts.locale].categories[opts.type], true);
          return opts;
        };
        PluralRules2.prototype.select = function(val) {
          var pr = this;
          validateInstance(pr, "select");
          var n = (0, ecma402_abstract_1.ToNumber)(val);
          return (0, ResolvePlural_1.ResolvePlural)(pr, n, { getInternalSlots: get_internal_slots_1.default, PluralRuleSelect });
        };
        PluralRules2.prototype.toString = function() {
          return "[object Intl.PluralRules]";
        };
        PluralRules2.supportedLocalesOf = function(locales, options) {
          return (0, ecma402_abstract_1.SupportedLocales)(PluralRules2.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
        };
        PluralRules2.__addLocaleData = function() {
          var data = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
          }
          for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
            var _b = data_1[_a], d = _b.data, locale = _b.locale;
            PluralRules2.localeData[locale] = d;
            PluralRules2.availableLocales.add(locale);
            if (!PluralRules2.__defaultLocale) {
              PluralRules2.__defaultLocale = locale;
            }
          }
        };
        PluralRules2.getDefaultLocale = function() {
          return PluralRules2.__defaultLocale;
        };
        PluralRules2.localeData = {};
        PluralRules2.availableLocales = /* @__PURE__ */ new Set();
        PluralRules2.__defaultLocale = "";
        PluralRules2.relevantExtensionKeys = [];
        PluralRules2.polyfilled = true;
        return PluralRules2;
      }()
    );
    exports.PluralRules = PluralRules;
    try {
      if (typeof Symbol !== "undefined") {
        Object.defineProperty(PluralRules.prototype, Symbol.toStringTag, {
          value: "Intl.PluralRules",
          writable: false,
          enumerable: false,
          configurable: true
        });
      }
      try {
        Object.defineProperty(PluralRules, "length", {
          value: 0,
          writable: false,
          enumerable: false,
          configurable: true
        });
      } catch (error) {
      }
      Object.defineProperty(PluralRules.prototype.constructor, "length", {
        value: 0,
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PluralRules.supportedLocalesOf, "length", {
        value: 1,
        writable: false,
        enumerable: false,
        configurable: true
      });
    } catch (ex) {
    }
  }
});

// node_modules/@formatjs/intl-pluralrules/supported-locales.generated.js
var require_supported_locales_generated = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/supported-locales.generated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedLocales = void 0;
    exports.supportedLocales = ["af", "ak", "am", "an", "ar", "ars", "as", "asa", "ast", "az", "bal", "be", "bem", "bez", "bg", "bho", "bm", "bn", "bo", "br", "brx", "bs", "ca", "ce", "ceb", "cgg", "chr", "ckb", "cs", "cy", "da", "de", "doi", "dsb", "dv", "dz", "ee", "el", "en", "eo", "es", "et", "eu", "fa", "ff", "fi", "fil", "fo", "fr", "fur", "fy", "ga", "gd", "gl", "gsw", "gu", "guw", "gv", "ha", "haw", "he", "hi", "hnj", "hr", "hsb", "hu", "hy", "ia", "id", "ig", "ii", "io", "is", "it", "iu", "ja", "jbo", "jgo", "jmc", "jv", "jw", "ka", "kab", "kaj", "kcg", "kde", "kea", "kk", "kkj", "kl", "km", "kn", "ko", "ks", "ksb", "ksh", "ku", "kw", "ky", "lag", "lb", "lg", "lij", "lkt", "ln", "lo", "lt", "lv", "mas", "mg", "mgo", "mk", "ml", "mn", "mo", "mr", "ms", "mt", "my", "nah", "naq", "nb", "nd", "ne", "nl", "nn", "nnh", "no", "nqo", "nr", "nso", "ny", "nyn", "om", "or", "os", "osa", "pa", "pap", "pcm", "pl", "prg", "ps", "pt", "pt-PT", "rm", "ro", "rof", "ru", "rwk", "sah", "saq", "sat", "sc", "scn", "sd", "sdh", "se", "seh", "ses", "sg", "sh", "shi", "si", "sk", "sl", "sma", "smi", "smj", "smn", "sms", "sn", "so", "sq", "sr", "ss", "ssy", "st", "su", "sv", "sw", "syr", "ta", "te", "teo", "th", "ti", "tig", "tk", "tl", "tn", "to", "tpi", "tr", "ts", "tzm", "ug", "uk", "und", "ur", "uz", "ve", "vi", "vo", "vun", "wa", "wae", "wo", "xh", "xog", "yi", "yo", "yue", "zh", "zu"];
  }
});

// node_modules/@formatjs/intl-pluralrules/should-polyfill.js
var require_should_polyfill = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/should-polyfill.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldPolyfill = void 0;
    var intl_localematcher_1 = (init_lib(), __toCommonJS(lib_exports));
    var supported_locales_generated_1 = require_supported_locales_generated();
    function supportedLocalesOf(locale) {
      if (!locale) {
        return true;
      }
      var locales = Array.isArray(locale) ? locale : [locale];
      return Intl.PluralRules.supportedLocalesOf(locales).length === locales.length;
    }
    function shouldPolyfill(locale) {
      if (locale === void 0) {
        locale = "en";
      }
      if (!("PluralRules" in Intl) || new Intl.PluralRules("en", { minimumFractionDigits: 2 }).select(1) === "one" || !supportedLocalesOf(locale)) {
        return locale ? (0, intl_localematcher_1.match)([locale], supported_locales_generated_1.supportedLocales, "en") : void 0;
      }
    }
    exports.shouldPolyfill = shouldPolyfill;
  }
});

// node_modules/@formatjs/intl-pluralrules/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/@formatjs/intl-pluralrules/polyfill.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var _1 = require_intl_pluralrules();
    var should_polyfill_1 = require_should_polyfill();
    if ((0, should_polyfill_1.shouldPolyfill)()) {
      Object.defineProperty(Intl, "PluralRules", {
        value: _1.PluralRules,
        writable: true,
        enumerable: false,
        configurable: true
      });
    }
  }
});
export default require_polyfill();
//# sourceMappingURL=@formatjs_intl-pluralrules_polyfill.js.map
